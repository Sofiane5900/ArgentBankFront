{"ast":null,"code":"import { updateUsername } from '../Redux/actions/authActions'; // Import the action creator for updating the username\n\n// ** LOGIN ** //\nexport const loginUser = async (email, password, dispatch) => {\n  // Pass dispatch as an argument\n  try {\n    const response = await fetch('http://localhost:3001/api/v1/user/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Invalid email or password');\n    }\n    const data = await response.json();\n    if (data.body && data.body.token) {\n      localStorage.setItem('token', data.body.token);\n\n      // Dispatch action to update username\n      dispatch(updateUsername(data.body.userName));\n      return data.body.token;\n    } else {\n      throw new Error('Token is missing from response');\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// ** FETCH USER PROFILE ** //\nexport const fetchUserProfile = async () => {\n  try {\n    const response = await fetch('http://localhost:3001/api/v1/user/profile', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}` // The authorization header is set with the token\n      },\n      body: JSON.stringify({})\n    });\n    if (!response.ok) {\n      // If the response is not ok, throw an error\n      throw new Error('Failed to fetch user profile');\n    }\n    const data = await response.json(); // Parse the response body as JSON\n    const {\n      body\n    } = data; // Extract the body from the response data \n    const username = body && body.userName; // Extract the username from the response body\n    if (!username) {\n      throw new Error('Username not found in response');\n    }\n    return username; // Return the username \n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// ** CHANGE USERNAME ** //\n// Fonction pour mettre à jour le profil utilisateur avec le nouvel username\nexport const updateUserProfile = async newUsername => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch('http://localhost:3001/api/v1/user/profile', {\n      method: 'PUT',\n      // Utiliser la méthode PUT pour la mise à jour\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        userName: newUsername\n      }) // Envoyer le nouvel username dans le corps de la requête\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update user profile');\n    }\n\n    // Mettre à jour l'username dans le store Redux\n    updateUsername(newUsername);\n    return 'Username updated successfully';\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};","map":{"version":3,"names":["updateUsername","loginUser","email","password","dispatch","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","token","localStorage","setItem","userName","error","message","fetchUserProfile","getItem","username","updateUserProfile","newUsername"],"sources":["C:/Users/zey/Desktop/Coding OC/ArgentBank-website-main/projet/src/components/Redux/apiCalls.js"],"sourcesContent":["import { updateUsername } from '../Redux/actions/authActions'; // Import the action creator for updating the username\r\n\r\n\r\n// ** LOGIN ** //\r\nexport const loginUser = async (email, password, dispatch) => { // Pass dispatch as an argument\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/v1/user/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n  \r\n      const data = await response.json();\r\n  \r\n      if (data.body && data.body.token) {\r\n        localStorage.setItem('token', data.body.token);\r\n        \r\n        // Dispatch action to update username\r\n        dispatch(updateUsername(data.body.userName));\r\n        \r\n        return data.body.token;\r\n      } else {\r\n        throw new Error('Token is missing from response');\r\n      }\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    } \r\n  };\r\n\r\n\r\n  // ** FETCH USER PROFILE ** //\r\n  export const fetchUserProfile = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/v1/user/profile', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}` // The authorization header is set with the token\r\n        },\r\n        body: JSON.stringify({})\r\n      });\r\n  \r\n      if (!response.ok) { // If the response is not ok, throw an error\r\n        throw new Error('Failed to fetch user profile');\r\n      }\r\n  \r\n      const data = await response.json(); // Parse the response body as JSON\r\n      const { body } = data; // Extract the body from the response data \r\n      const username = body && body.userName; // Extract the username from the response body\r\n      if (!username) { \r\n        throw new Error('Username not found in response');\r\n      }\r\n      return username; // Return the username \r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  };\r\n  \r\n\r\n// ** CHANGE USERNAME ** //\r\n  // Fonction pour mettre à jour le profil utilisateur avec le nouvel username\r\nexport const updateUserProfile = async (newUsername) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n\r\n    const response = await fetch('http://localhost:3001/api/v1/user/profile', {\r\n      method: 'PUT', // Utiliser la méthode PUT pour la mise à jour\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({ userName: newUsername }) // Envoyer le nouvel username dans le corps de la requête\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update user profile');\r\n    }\r\n\r\n    // Mettre à jour l'username dans le store Redux\r\n    updateUsername(newUsername);\r\n\r\n    return 'Username updated successfully';\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}