{"ast":null,"code":"import { loginUser } from '../apiCalls'; // Import the loginUser function from apiCalls.js\nimport { SIGN_OUT } from '../authActionsTypes';\nexport const login = (email, password) => async dispatch => {\n  // Ici, je crée une action asynchrone qui envoie une requête à l'API pour se connecter \n  try {\n    const token = await loginUser(email, password); // Ici, j'appelle la fonction loginUser pour me connecter \n    dispatch(loginSuccess(token)); // Si tout se passe bien, j'envoie une action LOGIN_SUCCESS avec le token\n  } catch (error) {\n    // Si j'ai une erreur, j'envoie une action LOGIN_FAILURE avec le message d'erreur\n    dispatch(loginFailure(error.message)); // Ici, j'envoie une action LOGIN_FAILURE avec le message d'erreur\n  }\n};\nexport const loginSuccess = token => ({\n  // Ici, je crée une action LOGIN_SUCCESS qui prend le token en paramètre\n  type: 'LOGIN_SUCCESS',\n  // Je définis le type de l'action\n  payload: token // Je définis le payload de l'action \n});\nexport const loginFailure = error => ({\n  // Ici, je crée une action LOGIN_FAILURE qui prend le message d'erreur en paramètre\n  type: 'LOGIN_FAILURE',\n  // Je définis le type de l'action \n  payload: error // Je définis le payload de l'action\n});\nexport const updateUsername = username => ({\n  type: 'UPDATE_USERNAME',\n  payload: username\n});\nexport const signOut = () => ({\n  type: SIGN_OUT\n});","map":{"version":3,"names":["loginUser","SIGN_OUT","login","email","password","dispatch","token","loginSuccess","error","loginFailure","message","type","payload","updateUsername","username","signOut"],"sources":["C:/Users/zey/Desktop/Coding OC/ArgentBank-website-main/projet/src/components/Redux/actions/authActions.js"],"sourcesContent":["import { loginUser } from '../apiCalls'; // Import the loginUser function from apiCalls.js\r\nimport { SIGN_OUT } from '../authActionsTypes';\r\n\r\n\r\nexport const login = (email, password) => async (dispatch) => { // Ici, je crée une action asynchrone qui envoie une requête à l'API pour se connecter \r\n  try {\r\n    const token = await loginUser(email, password); // Ici, j'appelle la fonction loginUser pour me connecter \r\n    dispatch(loginSuccess(token)); // Si tout se passe bien, j'envoie une action LOGIN_SUCCESS avec le token\r\n  } catch (error) { // Si j'ai une erreur, j'envoie une action LOGIN_FAILURE avec le message d'erreur\r\n    dispatch(loginFailure(error.message)); // Ici, j'envoie une action LOGIN_FAILURE avec le message d'erreur\r\n  } \r\n};\r\n\r\nexport const loginSuccess = (token) => ({ // Ici, je crée une action LOGIN_SUCCESS qui prend le token en paramètre\r\n  type: 'LOGIN_SUCCESS', // Je définis le type de l'action\r\n  payload: token, // Je définis le payload de l'action \r\n});\r\n\r\nexport const loginFailure = (error) => ({ // Ici, je crée une action LOGIN_FAILURE qui prend le message d'erreur en paramètre\r\n  type: 'LOGIN_FAILURE', // Je définis le type de l'action \r\n  payload: error,  // Je définis le payload de l'action\r\n});\r\n\r\nexport const updateUsername = (username) => ({\r\n  type: 'UPDATE_USERNAME',\r\n  payload: username,\r\n});\r\n\r\n\r\nexport const signOut = () => ({\r\n  type: SIGN_OUT\r\n});\r\n\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa,CAAC,CAAC;AACzC,SAASC,QAAQ,QAAQ,qBAAqB;AAG9C,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAAE;EAC9D,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMN,SAAS,CAACG,KAAK,EAAEC,QAAQ,CAAC,CAAC,CAAC;IAChDC,QAAQ,CAACE,YAAY,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOE,KAAK,EAAE;IAAE;IAChBH,QAAQ,CAACI,YAAY,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;EACzC;AACF,CAAC;AAED,OAAO,MAAMH,YAAY,GAAID,KAAK,KAAM;EAAE;EACxCK,IAAI,EAAE,eAAe;EAAE;EACvBC,OAAO,EAAEN,KAAK,CAAE;AAClB,CAAC,CAAC;AAEF,OAAO,MAAMG,YAAY,GAAID,KAAK,KAAM;EAAE;EACxCG,IAAI,EAAE,eAAe;EAAE;EACvBC,OAAO,EAAEJ,KAAK,CAAG;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAIC,QAAQ,KAAM;EAC3CH,IAAI,EAAE,iBAAiB;EACvBC,OAAO,EAAEE;AACX,CAAC,CAAC;AAGF,OAAO,MAAMC,OAAO,GAAGA,CAAA,MAAO;EAC5BJ,IAAI,EAAEV;AACR,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}